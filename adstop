#!/usr/bin/env bash

getCurPath() {
    # Get the current path
    curPath="${0%/*}"
}



loadConf() {
    # Load the custom config file or default template
    if [[ -f "${curPath}/adstop.conf" ]]; then
        # adstop.conf exists, source it
        . "${curPath}/adstop.conf"
    else
        # adstop.conf doesn't exist, source the template file
        . "${curPath}/adstop.tpl"
    fi
}



createTmpDir() {
    # Create temporary dir
    tmpDir='adstop.XXXXXXXXXX';
    tmpStorage=$(mktemp -t -d "${tmpDir}") || {
        exit 1;
    }
}



deleteTmpDir() {
    # Setup trap to clean tmp dir
    trap 'rm -rf "${tmpStorage}"' 0     # remove directory when script finishes
    trap 1 2 3 15                       # terminate script when receiving signal
}



getSecondaryTLDs() {
    # Create secondary TLD array
    declare -A secondary
    # Get secondary TLDs like co.uk, com.br etc
    curl -o  "${tmpStorage}/secondary.tld" https://github.com/flowplayer/tld/raw/master/secondary
    while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
        secondary[${line}]="${line}"
    done {fd}< "${tmpStorage}/secondary.tld"
}



parseDomainList() {
    # Go through domainList
    for i in "${domainList[@]}"; do
        curl -o "${tmpStorage}/domainList.blk" "${i}"
        while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
            test="${line:0:1}"
            if [[ "${test}" =~ [a-zA-Z0-9] ]]; then
                line="${line/$'\r'/}"
                domains[${line}]="${line}"
            fi
        done {fd}< "${tmpStorage}/domainList.blk"
    done
}



parseLocalList() {
    # Go through localList array
    for i in "${localList[@]}"; do
        curl -o "${tmpStorage}/localList.blk" "${i}"
        while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
            test="${line:0:9}"
            if [[ "${test}" = "127.0.0.1" ]]; then
                line="${line//$'\t'/ }"
                line="${line/  / }"
                line="${line/$'\r'/}"
                line="${line/127.0.0.1 /}"
                domains[${line}]="${line}"
            fi
        done {fd}< "${tmpStorage}/localList.blk"
    done
}



parseZeroList() {
    # Go through zeroList array
    for i in "${zeroList[@]}"; do
        curl -o "${tmpStorage}/zeroList.blk" "${i}"
        while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
            test="${line:0:7}"
            if [[ "${test}" = "0.0.0.0" ]]; then
                line="${line//$'\t'/ }"
                line="${line/  / }"
                line="${line/$'\r'/}"
                line="${line/0.0.0.0 /}"
                domains[${line}]="${line}"
            fi
        done {fd}< "${tmpStorage}/zeroList.blk"
    done
}



containsElement () {
    local e match="$1"
    shift
    for e; do
        [[ "$e" == "$match" ]] && return 0
    done
    return 1
}



cleanupList() {
    # Create hosts file output
    for i in "${domains[@]}"; do
        printf '%s\n' "${i}" >> "${tmpStorage}/hosts.sort"
    done
    # Sort hosts file output into hosts file
    sort -o "${tmpStorage}/hosts" "${tmpStorage}/hosts.sort"
    # Fill dnsmasq array
    for i in "${domains[@]}"; do
        test="${i//[^.]}"
        c="${#test}"
        while [[ ${c} -gt 1 ]]; do
            # Assuming secondary TLDs are never on their own in the list
            check="${i#*.}"
            test="${check//[^.]}"
            c="${#test}"
            # Check if it's a secondary TLD
            containsElement "${check}" "${secondary[@]}"
            if [[ $? -eq 0 ]]; then
                c=0
            else
                i="${check}"
            fi
        done
        dnsmasq[${i}]="${i}" || ( echo "--${i}--" && exit)
    done
    # Create dnsmasq file output
    for i in "${dnsmasq[@]}"; do
        printf 'address=/%s/0.0.0.0\n' "${i}" >> "${tmpStorage}/dnsmasq.sort"
    done
    # Sort hosts file output into hosts file
    sort -o "${tmpStorage}/dnsmasq" "${tmpStorage}/dnsmasq.sort"
}



main() {
    # Declare an associative array to hold the domains
    declare -A domains
    declare -A dnsmasq
    getCurPath
    createTmpDir
#    deleteTmpDir
    loadConf
    getSecondaryTLDs
    parseDomainList
    parseLocalList
    parseZeroList
    cleanupList
    finalize
}

main