#!/usr/bin/env bash

getCurPath() {
    # Get the current path
    curPath="${0%/*}"
}



loadConf() {
    # Load the custom config file or default template
    if [[ -f "${curPath}/adstop.conf" ]]; then
        # adstop.conf exists, source it
        . "${curPath}/adstop.conf"
    else
        # adstop.conf doesn't exist, source the template file
        . "${curPath}/adstop.tpl"
    fi
}



createTmpDir() {
    # Create temporary dir
    tmpDir='adstop.XXXXXXXXXX';
    tmpStorage=$(mktemp -t -d "${tmpDir}") || {
        exit 1;
    }
}



deleteTmpDir() {
    # Setup trap to clean tmp dir
    trap 'rm -rf "${tmpStorage}"' 0     # remove directory when script finishes
    trap 1 2 3 15                       # terminate script when receiving signal
}



getSecondaryTLDs() {
    # Get secondary TLDs like co.uk, com.br etc
    curl -o  "${tmpStorage}/secondary.tld" https://raw.githubusercontent.com/flowplayer/tld/master/secondary
    while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
        # Necessary to only match co.uk as .co.uk
        sec=".${line}"
        secondary[${sec}]="${sec}"
    done {fd}< "${tmpStorage}/secondary.tld"
}



parseDomainList() {
    # Go through domainList
    for i in "${domainList[@]}"; do
        curl -o "${tmpStorage}/domainList.blk" "${i}"
        while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
            test="${line:0:1}"
            if [[ "${test}" =~ [a-zA-Z0-9] ]]; then
                line="${line/$'\r'/}"
                line="${line%% *}"
                domains[${line}]="${line}"
            fi
        done {fd}< "${tmpStorage}/domainList.blk"
    done
}



parseLocalList() {
    # Go through localList array
    for i in "${localList[@]}"; do
        curl -o "${tmpStorage}/localList.blk" "${i}"
        while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
            test="${line:0:9}"
            if [[ "${test}" = "127.0.0.1" ]]; then
                line="${line//$'\t'/ }"
                line="${line/  / }"
                line="${line/$'\r'/}"
                line="${line/127.0.0.1 /}"
                line="${line%% *}"
                domains[${line}]="${line}"
            fi
        done {fd}< "${tmpStorage}/localList.blk"
    done
}



parseZeroList() {
    # Go through zeroList array
    for i in "${zeroList[@]}"; do
        curl -o "${tmpStorage}/zeroList.blk" "${i}"
        while IFS="" read -r -u "${fd}" line || [ -n "${line}" ]; do
            test="${line:0:7}"
            if [[ "${test}" = "0.0.0.0" ]]; then
                line="${line//$'\t'/ }"
                line="${line/  / }"
                line="${line/$'\r'/}"
                line="${line/0.0.0.0 /}"
                line="${line%% *}"
                domains[${line}]="${line}"
            fi
        done {fd}< "${tmpStorage}/zeroList.blk"
    done
}



parseTop500() {
    curl -Lo "${tmpStorage}/top500.csv" "https://moz.com/top-500/download/?table=top500Domains"
    tail -n +2 "${tmpStorage}/top500.csv" > "${tmpStorage}/top500.txt"
    while IFS=',' read -r -u "${fd}" rank domain other; do
        domain="${domain//\"/}"
        domain="${domain//\//}"
        case $domain in
            "doubleclick.net")
                # do nothing
                ;;
            *)
                dnsmasqIgnore+=(".${domain}")
                ;;
        esac
    done  {fd}<"${tmpStorage}/top500.txt"
}



containsElement() {
    local needle="${1}"
    local -n haystack="${2}"
    [[ -n "${haystack[$needle]}" ]] && return 0 || return 1
}



cleanupList() {
    # Create hosts file output
    for i in "${domains[@]}"; do
        printf '0.0.0.0     %s\n' "${i}" >> "${tmpStorage}/hosts.sort"
    done
    # Sort hosts file output into hosts file
    sort -o "${tmpStorage}/hosts" "${tmpStorage}/hosts.sort"
    # Remove defined entries
    for i in "${hostsRemove[@]}"; do
        sed -i "/$i/d" "${tmpStorage}/hosts"
    done
    # Fill dnsmasq array
    for i in "${domains[@]}"; do
        test="${i//[^.]}"
        c="${#test}"
        skip="n"
        for j in "${dnsmasqIgnore[@]}"; do
            if [[ "${i}" == *"${j}"* ]]; then
                echo "$i vs. $j"
                skip="y"
            fi
        done
        if [[ "${skip}" == "n" ]]; then
            while [[ ${c} -gt 1 ]]; do
                # Assuming secondary TLDs are never on their own in the list
                check="${i#*.}"
                test="${check//[^.]}"
                c="${#test}"
                # Check if it's a secondary TLD
                if containsElement ".${check}" secondary; then
                    c=0
                else
                    i="${check}"
                fi
            done
        fi
        # Build dnsmasqIDN array
        if [[ "${i}" != "0.0" ]]; then
            dnsmasqIDN[${i}]="${i}"
        fi
    done
    # Create dnsmasq file output
    for i in "${dnsmasqIDN[@]}"; do
        printf 'address=/%s/0.0.0.0\n' "${i}" >> "${tmpStorage}/dnsmasqIDN.sort"
    done
    # Sort hosts file output into hosts file
    sort -o "${tmpStorage}/dnsmasqIDN" "${tmpStorage}/dnsmasqIDN.sort"
    # Create non-IDN array
    LC_ALL=C
    for i in "${dnsmasqIDN[@]}"; do
        if ! [[ "${i}" =~ [^a-zA-Z0-9.\-] ]]; then
            dnsmasq[${i}]="${i}" || ( echo "--${i}--" && exit)
        fi
    done
    LC_ALL=
    for i in "${dnsmasq[@]}"; do
        printf 'address=/%s/0.0.0.0\n' "${i}" >> "${tmpStorage}/dnsmasq.sort"
    done
    # Sort hosts file output into hosts file
    sort -o "${tmpStorage}/dnsmasq" "${tmpStorage}/dnsmasq.sort"
    # Remove defined entries
    for i in "${dnsmasqRemove[@]}"; do
        sed -i "/$i/d" "${tmpStorage}/dnsmasq"
    done
}



main() {
    # Declare some associative arrays to hold data
    declare -A domains
    declare -A dnsmasq
    declare -A dnsmasqIDN
    declare -A secondary
    getCurPath
    createTmpDir
    deleteTmpDir
    loadConf
    getSecondaryTLDs
    parseDomainList
    parseLocalList
    parseZeroList
#    parseTop500
    cleanupList
    finalize
}

main

